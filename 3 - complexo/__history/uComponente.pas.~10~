unit uComponente;

interface

type

  TComponente = class;

  TComponenteArray = array of TComponente;

  TComponente = class
  private
    FName: String;
    FX: Integer;
    FXprevious: Integer;
    FY: Integer;
    FYprevious: Integer;
    FAltura: Integer;
    FAlturaprevious: Integer;
    FLargura: Integer;
    FLarguraprevious: Integer;
    FComponentes: TComponenteArray;
    procedure SetX( const Value: Integer );
    procedure SetAltura( const Value: Integer );
    procedure SetLargura( const Value: Integer );
    procedure SetY( const Value: Integer );
  public
    procedure AdicionaComponente( AComponente: TComponente ); virtual;
    procedure RemoveComponente( AComponente: TComponente ); virtual;

    property Componentes: TComponenteArray read FComponentes write FComponentes;

    property Name: String read FName write FName;
    property X: Integer read FX write SetX;
    property Xprevious: Integer read FXprevious;
    property Y: Integer read FY write SetY;
    property Yprevious: Integer read FYprevious;
    property Altura: Integer read FAltura write SetAltura;
    property Alturaprevious: Integer read FAlturaprevious;
    property Largura: Integer read FLargura write SetLargura;
    property Larguraprevious: Integer read FLarguraprevious;

  end;

implementation

uses
  System.SysUtils;

procedure TComponente.AdicionaComponente( AComponente: TComponente );
begin
  SetLength( FComponentes, Length( FComponentes ) + 1 );
  FComponentes[ Length( FComponentes ) - 1 ] := AComponente;
end;

procedure TComponente.RemoveComponente( AComponente: TComponente );
var
  I: Integer;
  Removeu: Boolean;
begin
  Removeu := False;
  for I   := 0 to Pred( Length( FComponentes ) ) do
  begin
    if ( FComponentes[ I ].FName = AComponente.FName ) and not( Removeu ) then
    begin
      FreeAndNil( FComponentes[ I ] );
      Removeu := True;
    end;

    if Removeu then
      FComponentes[ I ] := FComponentes[ I + 1 ];
  end;

  SetLength( FComponentes, Length( FComponentes ) - 1 );
end;

procedure TComponente.SetAltura( const Value: Integer );
begin
  FAlturaprevious := FAltura;
  FAltura         := Value;
end;

procedure TComponente.SetLargura( const Value: Integer );
begin
  FLarguraprevious := FLargura;
  FLargura         := Value;
end;

procedure TComponente.SetX( const Value: Integer );
begin
  FXprevious := FX;
  FX         := Value;
end;

procedure TComponente.SetY( const Value: Integer );
begin
  FYprevious := FY;
  FY         := Value;
end;

end.
